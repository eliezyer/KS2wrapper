function ConvertPhyKS2CLU(basepath,basename,ks_basepath,varargin)
%Function to convert the output of Phy2 and Kilosort2 into .clu files from
%neurosuite to be able to see the spikes in the neuroscope
%
% ###
% .
% +-- _folder(basename)
% |   +-- basename.dat
% |   +-- basename.xml
% |   +-- _Kilosort_date_time
% |   |   +-- spike_clusters.npy
% |   |   +-- spike_times.npy
% |   |   +-- cluster_group.tsv
% |   |   +-- pc_features.npy
% |   |   +-- templates.npy
% |   |   +-- rez.mat
% |   |   +-- cluster_info.tsv (ks2 only)
%
% ###
%
% KILOSORT2/PHY2 USERS:
% The output of kilosort2 and phy2 are enough for this code to run. Your
% structure of session/folders should be the same as shown above
%
% Inputs:
%   basepath    -  directory path to the main recording folder with .dat and .xml
%                  as well as kilosort folder generated by Kilosortwrapper
%   basename    -  shared file name of .dat and .xml (default is last part of
%                  current directory path, ie most immediate folder name)
%   ks_basepath - directory containing kilosort files
%
%
% Eliezyer de Oliveira, 2020. Adapted from ConvertPhyKilo2Neurosuite.m



if ~exist('basepath','var')
    [~,basename] = fileparts(cd);
    basepath = cd;
end
savepath = basepath;

p = inputParser;
addParameter(p,'kilosort2',false,@islogical)
parse(p,varargin{:})

kilosort2 = p.Results.kilosort2;

%finding the last Kilosort folder in order
if~exist('ks_basepath','var')
    KSdir = ks_basepath;
else
    auxDir = dir;
    auxKSD = find([auxDir.isdir]);
    for i = auxKSD
        if strfind(auxDir(i).name,'Kilosort')
            KSdir = auxDir(i).name;
        end
    end
end

%loading phy files
% cd(KSdir);

if ~exist('rez','var')
    load(fullfile(basepath,KSdir,'rez2.mat'))
end



% Nchan = rez.ops.Nchan;%not being used
% connected    = rez.connected; %not being used
% xcoords      = rez.xc;%not being used
% ycoords      = rez.yc;%not being used
% Nchan = rez.ops.Nchan;
% connected    = ones(Nchan, 1);
% xcoords      = ones(Nchan, 1);
% ycoords      = (1:Nchan)';
d   = dir('*.xml');
if ~isempty(d)
    par = LoadXml(fullfile(basepath,d(1).name));
else
    error('the .xml file is missing')
end

totalch = par.nChannels;
sbefore = 16;%samples before/after for spike extraction
safter = 16;%... could read from SpkGroups in xml
if isfield(par,'SpkGrps')
    if isfield(par.SpkGrps,'nSamples')
        if ~isempty(par.SpkGrps(1).nSamples);
            if isfield(par.SpkGrps,'PeakSample')
                if ~isempty(par.SpkGrps(1).PeakSample);
                    sbefore = par.SpkGrps(1).PeakSample;
                    safter = par.SpkGrps(1).nSamples - par.SpkGrps(1).PeakSample;
                end
            end
        end
    end
end

if exist(rez.ops.fbinary,'file')
    datpath = rez.ops.fbinary;
else
    datpath = fullfile(basepath,[basename '.dat']);
end

%% identify timestamps that are from good clusters
clusters = readNPY(fullfile(basepath,KSdir,'spike_clusters.npy'));
S = tdfread(fullfile(basepath,KSdir,'cluster_group.tsv'));
group = S.group;
cluster_id = S.cluster_id;

%getting good clusters only
GClusters = strfind(group(:,1)','g');
ExtClus = cluster_id(GClusters);

% Separating idx by cluster
auxiliarC = find(ismember(clusters,ExtClus));
%% getting spike information

spktimes = uint64(readNPY(fullfile(basepath,KSdir,'spike_times.npy')));
spktimes = spktimes(auxiliarC);
clu = uint32(readNPY(fullfile(basepath,KSdir,'spike_clusters.npy')));
clu = clu(auxiliarC);
pcFeatures = readNPY(fullfile(basepath,KSdir,'pc_features.npy'));
pcFeatures = pcFeatures(auxiliarC,:,:);
% pcFeatureInds = uint32(readNPY('pc_feature_ind.npy'))';
% templates = readNPY('templates.npy');

%extracting shank information if it's kilosort2 output
cluster_info = tdfread(fullfile(basepath,KSdir,'cluster_info.tsv'));
clu_channels = cluster_info.ch;
shanks = zeros(size(clu_channels));

for s = 1:length(par.SpkGrps)
    temp1 = ismember(clu_channels,par.SpkGrps(s).Channels);
    shanks(temp1) = s;
end

cluShank = cluster_info.id; %this is just the ID of the cluster, bad naming that needs change.
    
cd(basepath)
folder_name = 'Phy2Clus';
mkdir(fullfile(savepath,folder_name))


%% assigning cluster ids to shanks

auxC = unique(clu);
templateshankassignments = zeros(size(auxC));
for idx = 1:length(auxC)
    temp = find(cluShank == auxC(idx));
    templateshankassignments(idx) = shanks(temp);
end
grouplookup = rez.ops.kcoords;
allgroups = unique(grouplookup);
allgroups(allgroups==0) = [];

for groupidx = 1:length(allgroups)
    
    %if isfield(par.SpkGrps(groupidx),'Channels')
    %if ~isempty(par.SpkGrps(groupidx).Channels)
    % for each group loop through, find all templates clus
    tgroup          = allgroups(groupidx);%shank number
    ttemplateidxs   = find(templateshankassignments==tgroup);%which templates/clusters are in that shank
    %     ttemplates      = templates(:,:,ttemplateidxs);
    %     tPCFeatureInds  = pcFeatureInds(:,ttemplateidxs);
    
    tidx            = ismember(clu,auxC(ttemplateidxs));%find spikes indices in this shank
    tclu            = clu(tidx);%extract template/cluster assignments of spikes on this shank
    tspktimes       = spktimes(tidx);
    
    gidx            = find(rez.ops.kcoords == tgroup);%find all channels in this group
    channellist     = [];
    
    
    for ch = 1:length(par.SpkGrps(allgroups(groupidx)).Channels)
        if sum(ismember(rez.ops.chanMap(gidx),par.SpkGrps(allgroups(groupidx)).Channels(:)+1))
            channellist = par.SpkGrps(allgroups(groupidx)).Channels+1;
            break
        end
    end
    if isempty(channellist)
        disp(['Cannot find spkgroup for group ' num2str(groupidx) ])
        continue
    end
    
    
    %% writing to clu, res, fet, spk
    resname = fullfile(savepath, [basename '.res.' num2str(tgroup)]);
    
    %res
    fid=fopen(resname,'w');
    fprintf(fid,'%.0f\n',tspktimes);
    fclose(fid);
    clear fid
    cluname = fullfile(savepath, [basename '.clu.' num2str(tgroup)]);
    
    %clu
    tclu = cat(1,length(unique(tclu)),double(tclu));
    fid = fopen(cluname,'w');
    fprintf(fid,'%.0f\n',tclu);
    fclose(fid);
    clear fid
    

end

clear dat
copyfile(fullfile(savepath, [basename,'.clu.*']),fullfile(savepath, folder_name))
